<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Muanlei.GitHub.io</id>
    <title>最肯忘却古人诗/最不屑一顾是相思</title>
    <updated>2021-01-07T16:53:27.798Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Muanlei.GitHub.io"/>
    <link rel="self" href="https://Muanlei.GitHub.io/atom.xml"/>
    <subtitle>&quot;鬼蜷缩在屋檐想再看一眼人间&quot;</subtitle>
    <logo>https://Muanlei.GitHub.io/images/avatar.png</logo>
    <icon>https://Muanlei.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 最肯忘却古人诗/最不屑一顾是相思</rights>
    <entry>
        <title type="html"><![CDATA[C++从入门到起飞 （第一阶段）]]></title>
        <id>https://Muanlei.GitHub.io/post/ccong-ru-men-dao-qi-fei/</id>
        <link href="https://Muanlei.GitHub.io/post/ccong-ru-men-dao-qi-fei/">
        </link>
        <updated>2021-01-07T09:51:12.000Z</updated>
        <content type="html"><![CDATA[<p>####所有资料都是黑马程序员网站的讲课资料</p>
<h1 id="c课程安排">C++课程安排</h1>
<ul>
<li>明确C++课程学习阶段以及课程内容</li>
</ul>
<table>
<thead>
<tr>
<th>阶段</th>
<th>内容</th>
<th>目标</th>
<th>案例</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一阶段</td>
<td>C++基础语法入门</td>
<td>对C++有初步了解，能够有基础编程能力</td>
<td>通讯录管理系统</td>
</tr>
<tr>
<td>第二阶段</td>
<td>C++核心编程</td>
<td>介绍C++面向对象编程，为大型项目做铺垫</td>
<td>职工管理系统</td>
</tr>
<tr>
<td>第三阶段</td>
<td>C++提高编程</td>
<td>介绍C++泛型编程思想，以及STL的基本使用</td>
<td>演讲比赛系统</td>
</tr>
</tbody>
</table>
<ul>
<li>综合大案例：机房预约系统</li>
</ul>
<p>——————————————————————————————————————</p>
<h1 id="工程文件说明">工程文件说明</h1>
<p>注意：编译生成的 .exe 文件在工程目录下的Debug文件夹内。例如：路径为 E:\cDemo，打开看到有一个Debug文件夹，进入可以看到 cDemo.exe。</p>
<p>在Debug目录中还会看到一个名为 hello.obj 的文件。<code>.obj</code>是VC/VS生成的目标文件，类似于C-Free下的<code>.o</code>文件。</p>
<p>进入工程目录 E:\cDemo，除了 hello.c，还会看到很多其他文件，它们是VC6.0创建的，用来支持当前<br>
工程，不属于C语言的范围，你可以忽略它们。</p>
<p>如果读者感兴趣，我提供稍微简单点的说明：</p>
<ol>
<li>
<p>.dsp文件：DeveloperStudio Project，工程文件（文本格式），用来保存当前工程的信息，例如编译参数、包含的源文件等，不建议手动编辑。当需要打开一个工程时，打开该文件即可。</p>
</li>
<li>
<p>.dsw文件：DeveloperStudio Workspace，工作区文件，和DSP类似。</p>
</li>
<li>
<p>.opt文件：IDE的Option文件，保存了与当前工程有关的开发环境的配置，例如工具条位置、打开的文件、光标位置等。</p>
</li>
<li>
<p>.plg文件：日志文件（HTML文件），保存了程序的编译信息，例如错误和警告等。</p>
</li>
</ol>
<p>一个工程可以包含多个源文件和资源文件（图片、视频等），但只能生成一个二进制文件，例如可执行程序<code>.exe</code>、动态链接库<code>.dll</code>、静态链接库<code>.lib</code>等。工程类型决定了不同的配置信息，也决定了生成不同的二进制文件。</p>
<p>一个工作区可以包含多个工程，能够批量生成多个二进制文件。</p>
<p>安装的较大的程序，安装目录中一般包含多个 EXE 和 DLL。对于这样的程序，可以先创建一个工作区，再创建多个工程，这样就能一次性生成所需的多个二进制文件。</p>
<h1 id="c基础语法入门">C++基础语法入门</h1>
<h2 id="1-c初识">1 C++初识</h2>
<h3 id="11-第一个c程序">1.1  第一个C++程序</h3>
<p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="111-创建项目">1.1.1 创建项目</h4>
<p>​	Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开<br>
<img src="https://Muanlei.GitHub.io/post-images/1610021598430.png" alt="" loading="lazy"><br>
<img src="https://Muanlei.GitHub.io/post-images/1610021617641.png" alt="" loading="lazy"></p>
<h4 id="112-创建文件">1.1.2 创建文件</h4>
<p>右键源文件，选择添加-&gt;新建项<br>
<img src="https://Muanlei.GitHub.io/post-images/1610021700956.png" alt="" loading="lazy"><br>
给C++文件起个名称，然后点击添加即可。<br>
<img src="https://Muanlei.GitHub.io/post-images/1610021754127.png" alt="" loading="lazy"></p>
<h4 id="113-编写代码">1.1.3 编写代码</h4>
<pre><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

int main() {

	cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="114-运行程序">1.1.4 运行程序</h4>
<figure data-type="image" tabindex="1"><img src="https://Muanlei.GitHub.io/post-images/1610021863900.png" alt="" loading="lazy"></figure>
<h3 id="12-注释">1.2 注释</h3>
<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code>
<ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code>
<ul>
<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="13-变量">1.3 变量</h3>
<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

int main() {

	//变量的定义
	//语法：数据类型  变量名 = 初始值

	int a = 10;

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="14-常量">1.4  常量</h3>
<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li>
<p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p>
<ul>
<li><mark>通常在文件上方定义</mark>，表示一个常量</li>
</ul>
</li>
<li>
<p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p>
<ul>
<li><mark>通常在变量定义前加关键字const</mark>，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//1、宏常量
#define day 7

int main() {

	cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;
	//day = 8;  //报错，宏常量不可以修改

	//2、const修饰变量
	const int month = 12;
	cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;
	//month = 24; //报错，常量是不可以修改的
	
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="15-关键字">1.5 关键字</h3>
<p>**作用：**关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="16-标识符命名规则">1.6 标识符命名规则</h3>
<p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型">2 数据类型</h2>
<p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="21-整型">2.1 整型</h3>
<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
<h3 id="22-sizeof关键字">2.2 sizeof关键字</h3>
<p>**作用：**利用sizeof关键字可以<mark>统计数据类型所占内存大小</mark></p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;

	cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;

	cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;

	cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p><strong>整型结论</strong>：<mark>short &lt; int &lt;= long &lt;= long long</mark></p>
</blockquote>
<h3 id="23-实型浮点型">2.3 实型（浮点型）</h3>
<p><strong>作用</strong>：用于<mark>表示小数</mark></p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float</li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	float f1 = 3.14f;
	double d1 = 3.14;

	cout &lt;&lt; f1 &lt;&lt; endl;
	cout &lt;&lt; d1&lt;&lt; endl;

	cout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;
	cout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;

	//科学计数法
	float f2 = 3e2; // 3 * 10 ^ 2 
	cout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;

	float f3 = 3e-2;  // 3 * 0.1 ^ 2
	cout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="24-字符型">2.4 字符型</h3>
<p>**作用：**字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = 'a';</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用<mark>1个字节</mark>。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<pre><code class="language-C++">int main() {
	
	char ch = 'a';
	cout &lt;&lt; ch &lt;&lt; endl;
	cout &lt;&lt; sizeof(char) &lt;&lt; endl;

	//ch = &quot;abcde&quot;; //错误，不可以用双引号
	//ch = 'abcde'; //错误，单引号内只能引用一个字符

	cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码
	ch = 97; //可以直接用ASCII给字符型变量赋值
	cout &lt;&lt; ch &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>ASCII码表格：</p>
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>&quot;</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="25-转义字符">2.5 转义字符</h3>
<p>**作用：**用于表示一些<mark>不能显示出来的ASCII字符</mark></p>
<p>现阶段我们常用的转义字符有：<code>\n \\ \t</code></p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td><strong>\\</strong></td>
<td><strong>代表一个反斜线字符&quot;&quot;</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>'</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<sub>9，a</sub>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-C++">int main() {
	
	
	cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;\tHello&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="26-字符串型">2.6 字符串型</h3>
<p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li>
<p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	char str1[] = &quot;hello world&quot;;
	cout &lt;&lt; str1 &lt;&lt; endl;
    
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
</li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol>
<li>
<p><strong>C++风格字符串</strong>：  <code>string 变量名 = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	string str = &quot;hello world&quot;;
	cout &lt;&lt; str &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
</li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>
</blockquote>
<h3 id="27-布尔类型-bool">2.7 布尔类型 bool</h3>
<p>**作用：**布尔数据类型代表真或假的值</p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  --- 真（本质是1）</li>
<li>false --- 假（本质是0）</li>
</ul>
<p><strong>bool类型占<mark>1个字节</mark>大小</strong></p>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	bool flag = true;
	cout &lt;&lt; flag &lt;&lt; endl; // 1

	flag = false;
	cout &lt;&lt; flag &lt;&lt; endl; // 0

	cout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="28-数据的输入">2.8 数据的输入</h3>
<p><strong>作用：用于从键盘获取数据</strong></p>
<p>**关键字：**cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<pre><code class="language-C++">int main(){

	//整型输入
	int a = 0;
	cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; a;
	cout &lt;&lt; a &lt;&lt; endl;

	//浮点型输入
	double d = 0;
	cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; d;
	cout &lt;&lt; d &lt;&lt; endl;

	//字符型输入
	char ch = 0;
	cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; ch;
	cout &lt;&lt; ch &lt;&lt; endl;

	//字符串型输入
	string str;
	cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; str;
	cout &lt;&lt; str &lt;&lt; endl;

	//布尔类型输入
	bool flag = true;
	cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; flag;
	cout &lt;&lt; flag &lt;&lt; endl;
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
}
</code></pre>
<h2 id="3-运算符">3 运算符</h2>
<p>**作用：**用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
<h3 id="31-算术运算符">3.1 算术运算符</h3>
<p><strong>作用</strong>：用于处理四则运算</p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>--</td>
<td>前置递减</td>
<td>a=2; b=--a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>--</td>
<td>后置递减</td>
<td>a=2; b=a--;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
<p><strong>示例1：</strong></p>
<pre><code class="language-C++">//加减乘除
int main() {

	int a1 = 10;
	int b1 = 3;

	cout &lt;&lt; a1 + b1 &lt;&lt; endl;
	cout &lt;&lt; a1 - b1 &lt;&lt; endl;
	cout &lt;&lt; a1 * b1 &lt;&lt; endl;
	cout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数

	int a2 = 10;
	int b2 = 20;
	cout &lt;&lt; a2 / b2 &lt;&lt; endl; 

	int a3 = 10;
	int b3 = 0;
	//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0


	//两个小数可以相除
	double d1 = 0.5;
	double d2 = 0.25;
	cout &lt;&lt; d1 / d2 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<pre><code class="language-C++">//取模
int main() {

	int a1 = 10;
	int b1 = 3;

	cout &lt;&lt; 10 % 3 &lt;&lt; endl;

	int a2 = 10;
	int b2 = 20;

	cout &lt;&lt; a2 % b2 &lt;&lt; endl;

	int a3 = 10;
	int b3 = 0;

	//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0

	//两个小数不可以取模
	double d1 = 3.14;
	double d2 = 1.1;

	//cout &lt;&lt; d1 % d2 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<pre><code class="language-C++">//递增
int main() {

	//后置递增
	int a = 10;
	a++; //等价于a = a + 1
	cout &lt;&lt; a &lt;&lt; endl; // 11

	//前置递增
	int b = 10;
	++b;
	cout &lt;&lt; b &lt;&lt; endl; // 11

	//区别
	//前置递增先对变量进行++，再计算表达式
	int a2 = 10;
	int b2 = ++a2 * 10;
	cout &lt;&lt; b2 &lt;&lt; endl;

	//后置递增先计算表达式，后对变量进行++
	int a3 = 10;
	int b3 = a3++ * 10;
	cout &lt;&lt; b3 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="32-赋值运算符">3.2 赋值运算符</h3>
<p>**作用：**用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//赋值运算符

	// =
	int a = 10;
	a = 100;
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	// +=
	a = 10;
	a += 2; // a = a + 2;
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	// -=
	a = 10;
	a -= 2; // a = a - 2
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	// *=
	a = 10;
	a *= 2; // a = a * 2
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	// /=
	a = 10;
	a /= 2;  // a = a / 2;
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	// %=
	a = 10;
	a %= 2;  // a = a % 2;
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="33-比较运算符">3.3 比较运算符</h3>
<p>**作用：**用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	int a = 10;
	int b = 20;

	cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 

	cout &lt;&lt; (a != b) &lt;&lt; endl; // 1

	cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0

	cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1

	cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0

	cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， <mark>“真”用数字“1”来表示， “假”用数字“0”来表示。</mark></p>
</blockquote>
<h3 id="34-逻辑运算符">3.4 逻辑运算符</h3>
<p>**作用：**用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
<p>**示例1：**逻辑非</p>
<pre><code class="language-C++">//逻辑运算符  --- 非
int main() {

	int a = 10;

	cout &lt;&lt; !a &lt;&lt; endl; // 0

	cout &lt;&lt; !!a &lt;&lt; endl; // 1

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p>**示例2：**逻辑与</p>
<pre><code class="language-C++">//逻辑运算符  --- 与
int main() {

	int a = 10;
	int b = 10;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1

	a = 10;
	b = 0;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 

	a = 0;
	b = 0;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<blockquote>
<p>总结：逻辑<mark>与</mark>运算符总结： <mark>同真为真，其余为假</mark></p>
</blockquote>
<p>**示例3：**逻辑或</p>
<pre><code class="language-c++">//逻辑运算符  --- 或
int main() {

	int a = 10;
	int b = 10;

	cout &lt;&lt; (a || b) &lt;&lt; endl;// 1

	a = 10;
	b = 0;

	cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 

	a = 0;
	b = 0;

	cout &lt;&lt; (a || b) &lt;&lt; endl;// 0

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>逻辑<mark>或</mark>运算符总结： <mark>同假为假，其余为真</mark></p>
</blockquote>
<h2 id="4-程序流程结构">4 程序流程结构</h2>
<p>C/C++支持最基本的三种程序运行结构：<mark>顺序结构、选择结构、循环结构</mark></p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="41-选择结构">4.1 选择结构</h3>
<h4 id="411-if语句">4.1.1 if语句</h4>
<p>**作用：**执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li>
<p>单行格式if语句</p>
</li>
<li>
<p>多行格式if语句</p>
</li>
<li>
<p>多条件的if语句</p>
</li>
</ul>
<ol>
<li>
<p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code><br>
<img src="https://Muanlei.GitHub.io/post-images/1610022164812.png" alt="" loading="lazy"></p>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	//选择结构-单行if语句
	//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印

	int score = 0;
	cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;
	cin &gt;&gt; score;

	cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;

	//if语句
	//注意事项，在if判断语句后面，不要加分号
	if (score &gt; 600)
	{
		cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
</li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2">
<li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://Muanlei.GitHub.io/post-images/1610022189405.png" alt="" loading="lazy"></figure>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	int score = 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	{
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<ol start="3">
<li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://Muanlei.GitHub.io/post-images/1610022402598.png" alt="" loading="lazy"></figure>
<p>示例：</p>
<pre><code class="language-C++">	int main() {

	int score = 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	{
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
	}
	else if (score &gt; 500)
	{
		cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
	}
	else if (score &gt; 400)
	{
		cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">int main() {

	int score = 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	{
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
		if (score &gt; 700)
		{
			cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;
		}
		else if (score &gt; 650)
		{
			cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;
		}
		else
		{
			cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;
		}
		
	}
	else if (score &gt; 500)
	{
		cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
	}
	else if (score &gt; 400)
	{
		cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<br>
<img src="https://Muanlei.GitHub.io/post-images/1610022445841.jpg" alt="" loading="lazy"></p>
<h4 id="412-三目运算符">4.1.2 三目运算符</h4>
<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int a = 10;
	int b = 20;
	int c = 0;

	c = a &gt; b ? a : b;
	cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

	//C++中三目运算符返回的是变量,可以继续赋值

	(a &gt; b ? a : b) = 100;

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
	cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="413-switch语句">4.1.3 switch语句</h4>
<p>**作用：**执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<pre><code class="language-C++">switch(表达式)

{

	case 结果1：执行语句;break;

	case 结果2：执行语句;break;

	...

	default:执行语句;break;

}

</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//请给电影评分 
	//10 ~ 9   经典   
	// 8 ~ 7   非常好
	// 6 ~ 5   一般
	// 5分以下 烂片

	int score = 0;
	cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;
	cin &gt;&gt; score;

	switch (score)
	{
	case 10:
	case 9:
		cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;
		break;
	case 8:
		cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;
		break;
	case 7:
	case 6:
		cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;
		break;
	default:
		cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;
		break;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="42-循环结构">4.2 循环结构</h3>
<h4 id="421-while循环语句">4.2.1 while循环语句</h4>
<p>**作用：**满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件){ 循环语句 }</code></p>
<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>
<figure data-type="image" tabindex="4"><img src="https://Muanlei.GitHub.io/post-images/1610022497419.png" alt="" loading="lazy"></figure>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int num = 0;
	while (num &lt; 10)
	{
		cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;
		num++;
	}
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong><mark>猜数字</mark></p>
<p>**案例描述：**系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<figure data-type="image" tabindex="5"><img src="https://Muanlei.GitHub.io/post-images/1610022556634.jpg" alt="" loading="lazy"></figure>
<h4 id="422-dowhile循环语句">4.2.2 do...while循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p>
<p>**注意：**与while的区别在于<mark>do...while会先执行一次循环语句</mark>，再判断循环条件<br>
<img src="https://Muanlei.GitHub.io/post-images/1610022596550.png" alt="" loading="lazy"></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int num = 0;

	do
	{
		cout &lt;&lt; num &lt;&lt; endl;
		num++;

	} while (num &lt; 10);
	
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p>**案例描述：**水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do...while语句，求出所有3位数中的水仙花数</p>
<h4 id="423-for循环语句">4.2.3 for循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	for (int i = 0; i &lt; 10; i++)
	{
		cout &lt;&lt; i &lt;&lt; endl;
	}
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>详解：</strong></p>
<figure data-type="image" tabindex="6"><img src="https://Muanlei.GitHub.io/post-images/1610022635484.png" alt="" loading="lazy"></figure>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<figure data-type="image" tabindex="7"><img src="https://Muanlei.GitHub.io/post-images/1610022679172.gif" alt="" loading="lazy"></figure>
<h4 id="424-嵌套循环">4.2.4 嵌套循环</h4>
<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<figure data-type="image" tabindex="8"><img src="https://Muanlei.GitHub.io/post-images/1610022710029.png" alt="" loading="lazy"></figure>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//外层循环执行1次，内层循环执行1轮
	for (int i = 0; i &lt; 10; i++)
	{
		for (int j = 0; j &lt; 10; j++)
		{
			cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**练习案例：**乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<figure data-type="image" tabindex="9"><img src="https://Muanlei.GitHub.io/post-images/1610022726563.jpg" alt="" loading="lazy"></figure>
<h3 id="43-跳转语句">4.3 跳转语句</h3>
<h4 id="431-break语句">4.3.1 break语句</h4>
<p><strong>作用:</strong> 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<pre><code class="language-C++">int main() {
	//1、在switch 语句中使用break
	cout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;

	int num = 0;

	cin &gt;&gt; num;

	switch (num)
	{
	case 1:
		cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;
		break;
	case 2:
		cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;
		break;
	case 3:
		cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;
		break;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>示例2：</strong></p>
<pre><code class="language-C++">int main() {
	//2、在循环语句中用break
	for (int i = 0; i &lt; 10; i++)
	{
		if (i == 5)
		{
			break; //跳出循环语句
		}
		cout &lt;&lt; i &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>示例3：</strong></p>
<pre><code class="language-C++">int main() {
	//在嵌套循环语句中使用break，退出内层循环
	for (int i = 0; i &lt; 10; i++)
	{
		for (int j = 0; j &lt; 10; j++)
		{
			if (j == 5)
			{
				break;
			}
			cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; endl;
	}
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="432-continue语句">4.3.2 continue语句</h4>
<p>**作用：**在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	for (int i = 0; i &lt; 100; i++)
	{
		if (i % 2 == 0)
		{
			continue;
		}
		cout &lt;&lt; i &lt;&lt; endl;
	}
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="433-goto语句">4.3.3 goto语句</h4>
<p>**作用：**可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p>**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;

	goto FLAG;

	cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;

	FLAG:

	cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组">5 数组</h2>
<h3 id="51-概述">5.1 概述</h3>
<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p>**特点1：**数组中的每个<mark>数据元素都是相同的数据类型</mark></p>
<p>**特点2：**数组是由<mark>连续的内存</mark>位置组成的</p>
<figure data-type="image" tabindex="10"><img src="https://Muanlei.GitHub.io/post-images/1610022754959.png" alt="" loading="lazy"></figure>
<h3 id="52-一维数组">5.2 一维数组</h3>
<h4 id="521-一维数组定义方式">5.2.1 一维数组定义方式</h4>
<p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型 数组名[ 数组长度 ];</code></li>
<li><code>数据类型 数组名[ 数组长度 ] = { 值1，值2 ...};</code></li>
<li><code>数据类型 数组名[ ] = { 值1，值2 ...};</code></li>
</ol>
<p>示例</p>
<pre><code class="language-C++">int main() {

	//定义方式1
	//数据类型 数组名[元素个数];
	int score[10];

	//利用下标赋值
	score[0] = 100;
	score[1] = 99;
	score[2] = 85;

	//利用下标输出
	cout &lt;&lt; score[0] &lt;&lt; endl;
	cout &lt;&lt; score[1] &lt;&lt; endl;
	cout &lt;&lt; score[2] &lt;&lt; endl;


	//第二种定义方式
	//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};
	//如果{}内不足10个数据，剩余数据用0补全
	int score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };
	
	//逐个输出
	//cout &lt;&lt; score2[0] &lt;&lt; endl;
	//cout &lt;&lt; score2[1] &lt;&lt; endl;

	//一个一个输出太麻烦，因此可以利用循环进行输出
	for (int i = 0; i &lt; 10; i++)
	{
		cout &lt;&lt; score2[i] &lt;&lt; endl;
	}

	//定义方式3
	//数据类型 数组名[] =  {值1，值2 ，值3 ...};
	int score3[] = { 100,90,80,70,60,50,40,30,20,10 };

	for (int i = 0; i &lt; 10; i++)
	{
		cout &lt;&lt; score3[i] &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="522-一维数组数组名">5.2.2 一维数组数组名</h4>
<p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//数组名用途
	//1、可以获取整个数组占用内存空间大小
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };

	cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
	cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;

	//2、可以通过数组名获取到数组首地址
	cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;
	cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;

	//arr = 100; 错误，数组名是常量，因此不可以赋值


	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p>**练习案例2：**数组元素逆置</p>
<p>**案例描述：**请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="523-冒泡排序">5.2.3 冒泡排序</h4>
<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="https://Muanlei.GitHub.io/post-images/1610022782998.png" alt="" loading="lazy"><br>
<strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<pre><code class="language-C++">int main() {

	int arr[9] = { 4,2,8,0,5,7,1,3,9 };

	for (int i = 0; i &lt; 9 - 1; i++)
	{
		for (int j = 0; j &lt; 9 - 1 - i; j++)
		{
			if (arr[j] &gt; arr[j + 1])
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}

	for (int i = 0; i &lt; 9; i++)
	{
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	}
    
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="53-二维数组">5.3 二维数组</h3>
<p>二维数组就是在一维数组上，多加一个维度。</p>
<figure data-type="image" tabindex="11"><img src="https://Muanlei.GitHub.io/post-images/1610023271380.png" alt="" loading="lazy"></figure>
<h4 id="531-二维数组定义方式">5.3.1 二维数组定义方式</h4>
<p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型 数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型 数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li>
<li><code>数据类型 数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li>
<li><code>数据类型 数组名[ ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></p>
</blockquote>
<p>示例：</p>
<pre><code class="language-C++">int main() {

	//方式1  
	//数组类型 数组名 [行数][列数]
	int arr[2][3];
	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[0][2] = 3;
	arr[1][0] = 4;
	arr[1][1] = 5;
	arr[1][2] = 6;

	for (int i = 0; i &lt; 2; i++)
	{
		for (int j = 0; j &lt; 3; j++)
		{
			cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; endl;
	}

	//方式2 
	//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };
	int arr2[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};

	//方式3
	//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };
	int arr3[2][3] = { 1,2,3,4,5,6 }; 

	//方式4 
	//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };
	int arr4[][3] = { 1,2,3,4,5,6 };
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="532-二维数组数组名">5.3.2 二维数组数组名</h4>
<ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//二维数组数组名
	int arr[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};

	cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;

	cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;

	//地址
	cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;

	cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="533-二维数组应用案例"><strong>5.3.3 二维数组应用案例</strong></h4>
<p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
<p><strong>参考答案：</strong></p>
<pre><code class="language-C++">int main() {

	int scores[3][3] =
	{
		{100,100,100},
		{90,50,100},
		{60,70,80},
	};

	string names[3] = { &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; };

	for (int i = 0; i &lt; 3; i++)
	{
		int sum = 0;
		for (int j = 0; j &lt; 3; j++)
		{
			sum += scores[i][j];
		}
		cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h2 id="6-函数">6 函数</h2>
<h3 id="61-概述">6.1 概述</h3>
<p>**作用：**将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="62-函数的定义">6.2 函数的定义</h3>
<p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型</p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句</p>
<p>5、return 表达式</p>
<p><strong>语法：</strong></p>
<pre><code class="language-C++">返回值类型 函数名 （参数列表）
{

       函数体语句

       return表达式

}
</code></pre>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p>**示例：**定义一个加法函数，实现两个数相加</p>
<pre><code class="language-C++">//函数定义
int add(int num1, int num2)
{
	int sum = num1 + num2;
	return sum;
}
</code></pre>
<h3 id="63-函数的调用">6.3 函数的调用</h3>
<p>**功能：**使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//函数定义
int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参
{
	int sum = num1 + num2;
	return sum;
}

int main() {

	int a = 10;
	int b = 10;
	//调用add函数
	int sum = add(a, b);//调用时的a，b称为实际参数，简称实参
	cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;

	a = 100;
	b = 100;

	sum = add(a, b);
	cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="64-值传递">6.4 值传递</h3>
<ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，<mark>如果形参发生，并不会影响实参</mark></li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">void swap(int num1, int num2)
{
	cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;
	cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;

	int temp = num1;
	num1 = num2;
	num2 = temp;

	cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;
	cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;

	//return ; 当函数声明时候，不需要返回值，可以不写return
}

int main() {

	int a = 10;
	int b = 20;

	swap(a, b);

	cout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="65-函数的常见样式"><strong>6.5 函数的常见样式</strong></h3>
<p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//函数常见样式
//1、 无参无返
void test01()
{
	//void a = 10; //无类型不可以创建变量,原因无法分配内存
	cout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;
	//test01(); 函数调用
}

//2、 有参无返
void test02(int a)
{
	cout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
}

//3、无参有返
int test03()
{
	cout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;
	return 10;
}

//4、有参有返
int test04(int a, int b)
{
	cout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;
	int sum = a + b;
	return sum;
}
</code></pre>
<h3 id="66-函数的声明">6.6 函数的声明</h3>
<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//声明可以多次，定义只能一次
//声明
int max(int a, int b);
int max(int a, int b);
//定义
int max(int a, int b)
{
	return a &gt; b ? a : b;
}

int main() {

	int a = 100;
	int b = 200;

	cout &lt;&lt; max(a, b) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="67-函数的分文件编写">6.7 函数的分文件编写</h3>
<p>**作用：**让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件</li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//swap.h文件
#include&lt;iostream&gt;
using namespace std;

//实现两个数字交换的函数声明
void swap(int a, int b);

</code></pre>
<pre><code class="language-C++">//swap.cpp文件
#include &quot;swap.h&quot;

void swap(int a, int b)
{
	int temp = a;
	a = b;
	b = temp;

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
}
</code></pre>
<pre><code class="language-C++">//main函数文件
#include &quot;swap.h&quot;
int main() {

	int a = 100;
	int b = 200;
	swap(a, b);

	system(&quot;pause&quot;);

	return 0;
}

</code></pre>
<h2 id="7-指针">7 指针</h2>
<h3 id="71-指针的基本概念">7.1 指针的基本概念</h3>
<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li>
<p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li>
<p>可以利用指针变量保存地址</p>
</li>
</ul>
<h3 id="72-指针变量的定义和使用">7.2 指针变量的定义和使用</h3>
<p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	//1、指针的定义
	int a = 10; //定义整型变量a
	
	//指针定义语法： 数据类型 * 变量名 ;
	int * p;

	//指针变量赋值
	p = &amp;a; //指针指向变量a的地址
	cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址
	cout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p

	//2、指针的使用
	//通过*操作指针变量指向的内存
	cout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过&quot; * &quot;操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="73-指针所占内存空间">7.3 指针所占内存空间</h3>
<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int a = 10;

	int * p;
	p = &amp;a; //指针指向数据a的地址

	cout &lt;&lt; *p &lt;&lt; endl; //* 解引用
	cout &lt;&lt; sizeof(p) &lt;&lt; endl;
	cout &lt;&lt; sizeof(char *) &lt;&lt; endl;
	cout &lt;&lt; sizeof(float *) &lt;&lt; endl;
	cout &lt;&lt; sizeof(double *) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="74-空指针和野指针">7.4 空指针和野指针</h3>
<p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p>**用途：**初始化指针变量</p>
<p>**注意：**空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<pre><code class="language-C++">int main() {

	//指针变量p指向内存地址编号为0的空间
	int * p = NULL;

	//访问空指针报错 
	//内存编号0 ~255为系统占用内存，不允许用户访问
	cout &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<pre><code class="language-C++">int main() {

	//指针变量p指向内存地址编号为0x1100的空间
	int * p = (int *)0x1100;

	//访问野指针报错 
	cout &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="75-const修饰指针">7.5 const修饰指针</h3>
<p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   --- 常量指针</li>
<li>const修饰常量   --- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">int main() {

	int a = 10;
	int b = 10;

	//const修饰的是指针，指针指向可以改，指针指向的值不可以更改
	const int * p1 = &amp;a; 
	p1 = &amp;b; //正确
	//*p1 = 100;  报错
	

	//const修饰的是常量，指针指向不可以改，指针指向的值可以更改
	int * const p2 = &amp;a;
	//p2 = &amp;b; //错误
	*p2 = 100; //正确

    //const既修饰指针又修饰常量
	const int * const p3 = &amp;a;
	//p3 = &amp;b; //错误
	//*p3 = 100; //错误

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="76-指针和数组">7.6 指针和数组</h3>
<p>**作用：**利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">int main() {

	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };

	int * p = arr;  //指向数组的指针

	cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;

	for (int i = 0; i &lt; 10; i++)
	{
		//利用指针遍历数组
		cout &lt;&lt; *p &lt;&lt; endl;
		p++;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="77-指针和函数">7.7 指针和函数</h3>
<p>**作用：**利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//值传递
void swap1(int a ,int b)
{
	int temp = a;
	a = b; 
	b = temp;
}
//地址传递
void swap2(int * p1, int *p2)
{
	int temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}

int main() {

	int a = 10;
	int b = 20;
	swap1(a, b); // 值传递不会改变实参

	swap2(&amp;a, &amp;b); //地址传递会改变实参

	cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

	cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="78-指针-数组-函数">7.8 指针、数组、函数</h3>
<p>**案例描述：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<pre><code class="language-c++">//冒泡排序函数
void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]
{
	for (int i = 0; i &lt; len - 1; i++)
	{
		for (int j = 0; j &lt; len - 1 - i; j++)
		{
			if (arr[j] &gt; arr[j + 1])
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}

//打印数组函数
void printArray(int arr[], int len)
{
	for (int i = 0; i &lt; len; i++)
	{
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	}
}

int main() {

	int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };
	int len = sizeof(arr) / sizeof(int);

	bubbleSort(arr, len);

	printArray(arr, len);

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体">8 结构体</h2>
<h3 id="81-结构体基本概念">8.1 结构体基本概念</h3>
<p>结构体属于用户<mark>自定义的数据类型</mark>，允许用户存储不同的数据类型</p>
<h3 id="82-结构体定义和使用">8.2 结构体定义和使用</h3>
<p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值...}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
}stu3; //结构体变量创建方式3 


int main() {

	//结构体变量创建方式1
	struct student stu1; //struct 关键字可以省略

	stu1.name = &quot;张三&quot;;
	stu1.age = 18;
	stu1.score = 100;
	
	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;

	//结构体变量创建方式2
	struct student stu2 = { &quot;李四&quot;,19,60 };

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;


	stu3.name = &quot;王五&quot;;
	stu3.age = 18;
	stu3.score = 80;
	

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ''.''  访问成员</p>
</blockquote>
<h3 id="83-结构体数组">8.3 结构体数组</h3>
<p>**作用：**将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct 结构体名 数组名[元素个数] = { {} , {} , ... {} }</code></p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
}

int main() {
	
	//结构体数组
	struct student arr[3]=
	{
		{&quot;张三&quot;,18,80 },
		{&quot;李四&quot;,19,60 },
		{&quot;王五&quot;,20,70 }
	};

	for (int i = 0; i &lt; 3; i++)
	{
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="84-结构体指针">8.4 结构体指针</h3>
<p>**作用：**通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};


int main() {
	
	struct student stu = { &quot;张三&quot;,18,100, };
	
	struct student * p = &amp;stu;
	
	p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="85-结构体嵌套结构体">8.5 结构体嵌套结构体</h3>
<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p>**例如：**每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};

//教师结构体定义
struct teacher
{
    //成员列表
	int id; //职工编号
	string name;  //教师姓名
	int age;   //教师年龄
	struct student stu; //子结构体 学生
};


int main() {

	struct teacher t1;
	t1.id = 10000;
	t1.name = &quot;老王&quot;;
	t1.age = 40;

	t1.stu.name = &quot;张三&quot;;
	t1.stu.age = 18;
	t1.stu.score = 100;

	cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;
	
	cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>**总结：**在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="86-结构体做函数参数">8.6 结构体做函数参数</h3>
<p>**作用：**将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};

//值传递
void printStudent(student stu )
{
	stu.age = 28;
	cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;
}

//地址传递
void printStudent2(student *stu)
{
	stu-&gt;age = 28;
	cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;
}

int main() {

	student stu = { &quot;张三&quot;,18,100};
	//值传递
	printStudent(stu);
	cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

	cout &lt;&lt; endl;

	//地址传递
	printStudent2(&amp;stu);
	cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="87-结构体中-const使用场景">8.7 结构体中 const使用场景</h3>
<p>**作用：**用const来防止误操作</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};

//const使用场景
void printStudent(const student *stu) //加const防止函数体中的误操作
{
	//stu-&gt;age = 100; //操作失败，因为加了const修饰
	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;

}

int main() {

	student stu = { &quot;张三&quot;,18,100 };

	printStudent(&amp;stu);

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="88-结构体案例">8.8 结构体案例</h3>
<h4 id="881-案例1">8.8.1 案例1</h4>
<p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">struct Student
{
	string name;
	int score;
};
struct Teacher
{
	string name;
	Student sArray[5];
};

void allocateSpace(Teacher tArray[] , int len)
{
	string tName = &quot;教师&quot;;
	string sName = &quot;学生&quot;;
	string nameSeed = &quot;ABCDE&quot;;
	for (int i = 0; i &lt; len; i++)
	{
		tArray[i].name = tName + nameSeed[i];
		
		for (int j = 0; j &lt; 5; j++)
		{
			tArray[i].sArray[j].name = sName + nameSeed[j];
			tArray[i].sArray[j].score = rand() % 61 + 40;
		}
	}
}

void printTeachers(Teacher tArray[], int len)
{
	for (int i = 0; i &lt; len; i++)
	{
		cout &lt;&lt; tArray[i].name &lt;&lt; endl;
		for (int j = 0; j &lt; 5; j++)
		{
			cout &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;
		}
	}
}

int main() {

	srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;

	Teacher tArray[3]; //老师数组

	int len = sizeof(tArray) / sizeof(Teacher);

	allocateSpace(tArray, len); //创建数据

	printTeachers(tArray, len); //打印数据
	
	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h4 id="882-案例2">8.8.2 案例2</h4>
<p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<pre><code class="language-C++">		{&quot;刘备&quot;,23,&quot;男&quot;},
		{&quot;关羽&quot;,22,&quot;男&quot;},
		{&quot;张飞&quot;,20,&quot;男&quot;},
		{&quot;赵云&quot;,21,&quot;男&quot;},
		{&quot;貂蝉&quot;,19,&quot;女&quot;},
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="language-C++">//英雄结构体
struct hero
{
	string name;
	int age;
	string sex;
};
//冒泡排序
void bubbleSort(hero arr[] , int len)
{
	for (int i = 0; i &lt; len - 1; i++)
	{
		for (int j = 0; j &lt; len - 1 - i; j++)
		{
			if (arr[j].age &gt; arr[j + 1].age)
			{
				hero temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
//打印数组
void printHeros(hero arr[], int len)
{
	for (int i = 0; i &lt; len; i++)
	{
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;
	}
}

int main() {

	struct hero arr[5] =
	{
		{&quot;刘备&quot;,23,&quot;男&quot;},
		{&quot;关羽&quot;,22,&quot;男&quot;},
		{&quot;张飞&quot;,20,&quot;男&quot;},
		{&quot;赵云&quot;,21,&quot;男&quot;},
		{&quot;貂蝉&quot;,19,&quot;女&quot;},
	};

	int len = sizeof(arr) / sizeof(hero); //获取数组元素个数

	bubbleSort(arr, len); //排序

	printHeros(arr, len); //打印

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>==================================================</p>
<p>#通讯录管理系统</p>
<h2 id="1-通讯录管理系统-系统需求">1、通讯录管理系统-系统需求</h2>
<p>通讯录是一个可以记录亲人、好友信息的工具。</p>
<p>本教程主要利用C++来实现一个通讯录管理系统</p>
<p>系统中需要实现的功能如下：</p>
<ul>
<li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li>
<li>显示联系人：显示通讯录中所有联系人信息</li>
<li>删除联系人：按照姓名进行删除指定联系人</li>
<li>查找联系人：按照姓名查看指定联系人信息</li>
<li>修改联系人：按照姓名重新修改指定联系人</li>
<li>清空联系人：清空通讯录中所有信息</li>
<li>退出通讯录：退出当前使用的通讯录</li>
</ul>
<h2 id="2-创建项目">2、创建项目</h2>
<p>创建项目步骤如下：</p>
<ul>
<li>创建新项目</li>
<li>添加文件</li>
</ul>
<h3 id="21-创建项目">2.1 创建项目</h3>
<p>打开vs2017后，点击创建新项目，创建新的C++项目</p>
<figure data-type="image" tabindex="12"><img src="https://Muanlei.GitHub.io/post-images/1610034038005.png" alt="" loading="lazy"></figure>
<p>填写项目名称，选择项目路径<br>
<img src="https://Muanlei.GitHub.io/post-images/1610034073615.png" alt="" loading="lazy"></p>
<h3 id="22添加文件">2.2添加文件</h3>
<p><img src="https://Muanlei.GitHub.io/post-images/1610034088512.png" alt="" loading="lazy"><br>
<img src="https://Muanlei.GitHub.io/post-images/1610034114605.png" alt="" loading="lazy"></p>
<p>添加成功后，效果如图：</p>
<figure data-type="image" tabindex="13"><img src="https://Muanlei.GitHub.io/post-images/1610034135220.png" alt="" loading="lazy"></figure>
<p>至此，项目已创建完毕</p>
<h2 id="3-菜单功能">3、菜单功能</h2>
<p><strong>功能描述：</strong> 用户选择功能的界面</p>
<p>菜单界面效果如下图：</p>
<figure data-type="image" tabindex="14"><img src="https://Muanlei.GitHub.io/post-images/1610034161311.png" alt="" loading="lazy"></figure>
<p><strong>步骤：</strong></p>
<ul>
<li>封装函数显示该界面  如 <code>void showMenu()</code></li>
<li>在main函数中调用封装好的函数</li>
</ul>
<p><strong>代码：</strong></p>
<pre><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

//菜单界面
void showMenu()
{
	cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  1、添加联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  2、显示联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  3、删除联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  4、查找联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  5、修改联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  6、清空联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  0、退出通讯录  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;
}

int main() {

	showMenu();

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h2 id="4-退出功能">4、退出功能</h2>
<p>功能描述：退出通讯录系统</p>
<p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p>
<p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p>
<p><strong>代码：</strong></p>
<pre><code class="language-C++">int main() {

	int select = 0;

	while (true)
	{
		showMenu();

		cin &gt;&gt; select;
		
		switch (select)
		{
		case 1:  //添加联系人
			break;
		case 2:  //显示联系人
			break;
		case 3:  //删除联系人
			break;
		case 4:  //查找联系人
			break;
		case 5:  //修改联系人
			break;
		case 6:  //清空联系人
			break;
		case 0:  //退出通讯录
			cout &lt;&lt; &quot;欢迎下次使用&quot; &lt;&lt; endl;
			system(&quot;pause&quot;);
			return 0;
			break;
		default:
			break;
		}
	}

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<p>效果图：</p>
<figure data-type="image" tabindex="15"><img src="https://Muanlei.GitHub.io/post-images/1610034187656.png" alt="" loading="lazy"></figure>
<h2 id="5-添加联系人">5、添加联系人</h2>
<p>功能描述：</p>
<p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p>
<p>添加联系人实现步骤：</p>
<ul>
<li>设计联系人结构体</li>
<li>设计通讯录结构体</li>
<li>main函数中创建通讯录</li>
<li>封装添加联系人函数</li>
<li>测试添加联系人功能</li>
</ul>
<h3 id="51-设计联系人结构体">5.1 设计联系人结构体</h3>
<p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p>
<p>设计如下：</p>
<pre><code class="language-C++">#include &lt;string&gt;  //string头文件
//联系人结构体
struct Person
{
	string m_Name; //姓名
	int m_Sex; //性别：1男 2女
	int m_Age; //年龄
	string m_Phone; //电话
	string m_Addr; //住址
};
</code></pre>
<h3 id="52-设计通讯录结构体">5.2 设计通讯录结构体</h3>
<p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p>
<p>设计如下</p>
<pre><code class="language-C++">#define MAX 1000 //最大人数

//通讯录结构体
struct Addressbooks
{
	struct Person personArray[MAX]; //通讯录中保存的联系人数组
	int m_Size; //通讯录中人员个数
};
</code></pre>
<h3 id="53-main函数中创建通讯录">5.3 main函数中创建通讯录</h3>
<p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p>
<pre><code class="language-c++">mian函数起始位置添加：

	//创建通讯录
	Addressbooks abs;
	//初始化通讯录中人数
	abs.m_Size = 0;
</code></pre>
<h3 id="54-封装添加联系人函数">5.4 封装添加联系人函数</h3>
<p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p>
<p>添加联系人代码：</p>
<pre><code class="language-C++">//1、添加联系人信息
void addPerson(Addressbooks *abs)
{
	//判断电话本是否满了
	if (abs-&gt;m_Size == MAX)
	{
		cout &lt;&lt; &quot;通讯录已满，无法添加&quot; &lt;&lt; endl;
		return;
	}
	else
	{
		//姓名
		string name;
		cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;
		cin &gt;&gt; name;
		abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;

		cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;1 -- 男&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 -- 女&quot; &lt;&lt; endl;

		//性别
		int sex = 0;
		while (true)
		{
			cin &gt;&gt; sex;
			if (sex == 1 || sex == 2)
			{
				abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;
				break;
			}
			cout &lt;&lt; &quot;输入有误，请重新输入&quot;;
		}

		//年龄
		cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;
		int age = 0;
		cin &gt;&gt; age;
		abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;

		//联系电话
		cout &lt;&lt; &quot;请输入联系电话：&quot; &lt;&lt; endl;
		string phone = &quot;&quot;;
		cin &gt;&gt; phone;
		abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;

		//家庭住址
		cout &lt;&lt; &quot;请输入家庭住址：&quot; &lt;&lt; endl;
		string address;
		cin &gt;&gt; address;
		abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;

		//更新通讯录人数
		abs-&gt;m_Size++;

		cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;
		system(&quot;pause&quot;);
		system(&quot;cls&quot;);
	}
}
</code></pre>
<h3 id="55-测试添加联系人功能">5.5 测试添加联系人功能</h3>
<p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p>
<p>在switch case 语句中，case1里添加：</p>
<pre><code class="language-C++">case 1:  //添加联系人
	addPerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图：</p>
<figure data-type="image" tabindex="16"><img src="https://Muanlei.GitHub.io/post-images/1610034221083.png" alt="" loading="lazy"></figure>
<h2 id="6-显示联系人">6、显示联系人</h2>
<p>功能描述：显示通讯录中已有的联系人信息</p>
<p>显示联系人实现步骤：</p>
<ul>
<li>封装显示联系人函数</li>
<li>测试显示联系人功能</li>
</ul>
<h3 id="61-封装显示联系人函数">6.1 封装显示联系人函数</h3>
<p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p>
<p>显示联系人代码：</p>
<pre><code class="language-C++">//2、显示所有联系人信息
void showPerson(Addressbooks * abs)
{
	if (abs-&gt;m_Size == 0)
	{
		cout &lt;&lt; &quot;当前记录为空&quot; &lt;&lt; endl;
	}
	else
	{
		for (int i = 0; i &lt; abs-&gt;m_Size; i++)
		{
			cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;性别：&quot; &lt;&lt; (abs-&gt;personArray[i].m_Sex == 1 ? &quot;男&quot; : &quot;女&quot;) &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;
		}
	}
	
	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

}
</code></pre>
<h3 id="62-测试显示联系人功能">6.2 测试显示联系人功能</h3>
<p>在switch case语句中，case 2 里添加</p>
<pre><code class="language-C++">case 2:  //显示联系人
	showPerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图：</p>
<figure data-type="image" tabindex="17"><img src="https://Muanlei.GitHub.io/post-images/1610034245399.png" alt="" loading="lazy"></figure>
<h2 id="7-删除联系人">7、删除联系人</h2>
<p>功能描述：按照姓名进行删除指定联系人</p>
<p>删除联系人实现步骤：</p>
<ul>
<li>封装检测联系人是否存在</li>
<li>封装删除联系人函数</li>
<li>测试删除联系人功能</li>
</ul>
<h3 id="71-封装检测联系人是否存在">7.1  封装检测联系人是否存在</h3>
<p>设计思路：</p>
<p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p>
<p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p>
<p>检测联系人是否存在代码：</p>
<pre><code class="language-C++">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1
int isExist(Addressbooks * abs, string name)
{
	for (int i = 0; i &lt; abs-&gt;m_Size; i++)
	{
		if (abs-&gt;personArray[i].m_Name == name)
		{
			return i;
		}
	}
	return -1;
}

</code></pre>
<h3 id="72-封装删除联系人函数">7.2 封装删除联系人函数</h3>
<p>根据用户输入的联系人判断该通讯录中是否有此人</p>
<p>查找到进行删除，并提示删除成功</p>
<p>查不到提示查无此人。</p>
<pre><code class="language-C++">//3、删除指定联系人信息
void deletePerson(Addressbooks * abs)
{
	cout &lt;&lt; &quot;请输入您要删除的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret = isExist(abs, name);
	if (ret != -1)
	{
		for (int i = ret; i &lt; abs-&gt;m_Size; i++)
		{
			abs-&gt;personArray[i] = abs-&gt;personArray[i + 1];
		}
         abs-&gt;m_Size--;
		cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);
}
</code></pre>
<h3 id="73-测试删除联系人功能">7.3 测试删除联系人功能</h3>
<p>在switch case 语句中，case3里添加：</p>
<pre><code class="language-C++">case 3:  //删除联系人
	deletePerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图：</p>
<p>存在情况：</p>
<figure data-type="image" tabindex="18"><img src="https://Muanlei.GitHub.io/post-images/1610034297408.png" alt="" loading="lazy"></figure>
<p>不存在情况：</p>
<figure data-type="image" tabindex="19"><img src="https://Muanlei.GitHub.io/post-images/1610034305983.png" alt="" loading="lazy"></figure>
<h2 id="8-查找联系人">8、查找联系人</h2>
<p>功能描述：按照姓名查看指定联系人信息</p>
<p>查找联系人实现步骤</p>
<ul>
<li>封装查找联系人函数</li>
<li>测试查找指定联系人</li>
</ul>
<h3 id="81-封装查找联系人函数">8.1 封装查找联系人函数</h3>
<p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p>
<p>查找联系人代码：</p>
<pre><code class="language-C++">//4、查找指定联系人信息
void findPerson(Addressbooks * abs)
{
	cout &lt;&lt; &quot;请输入您要查找的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret = isExist(abs, name);
	if (ret != -1)
	{
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;性别：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

}
</code></pre>
<h3 id="82-测试查找指定联系人">8.2 测试查找指定联系人</h3>
<p>在switch case 语句中，case4里添加：</p>
<pre><code class="language-C++">case 4:  //查找联系人
	findPerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图</p>
<p>存在情况：</p>
<figure data-type="image" tabindex="20"><img src="https://Muanlei.GitHub.io/post-images/1610034332088.png" alt="" loading="lazy"></figure>
<p>不存在情况：</p>
<figure data-type="image" tabindex="21"><img src="https://Muanlei.GitHub.io/post-images/1610034361111.png" alt="" loading="lazy"></figure>
<h2 id="9-修改联系人">9、修改联系人</h2>
<p>功能描述：按照姓名重新修改指定联系人</p>
<p>修改联系人实现步骤</p>
<ul>
<li>封装修改联系人函数</li>
<li>测试修改联系人功能</li>
</ul>
<h3 id="91-封装修改联系人函数">9.1 封装修改联系人函数</h3>
<p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p>
<p>修改联系人代码：</p>
<pre><code class="language-C++">//5、修改指定联系人信息
void modifyPerson(Addressbooks * abs)
{
	cout &lt;&lt; &quot;请输入您要修改的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret = isExist(abs, name);
	if (ret != -1)
	{
		//姓名
		string name;
		cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;
		cin &gt;&gt; name;
		abs-&gt;personArray[ret].m_Name = name;

		cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;1 -- 男&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 -- 女&quot; &lt;&lt; endl;

		//性别
		int sex = 0;
		while (true)
		{
			cin &gt;&gt; sex;
			if (sex == 1 || sex == 2)
			{
				abs-&gt;personArray[ret].m_Sex = sex;
				break;
			}
			cout &lt;&lt; &quot;输入有误，请重新输入&quot;;
		}

		//年龄
		cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;
		int age = 0;
		cin &gt;&gt; age;
		abs-&gt;personArray[ret].m_Age = age;

		//联系电话
		cout &lt;&lt; &quot;请输入联系电话：&quot; &lt;&lt; endl;
		string phone = &quot;&quot;;
		cin &gt;&gt; phone;
		abs-&gt;personArray[ret].m_Phone = phone;

		//家庭住址
		cout &lt;&lt; &quot;请输入家庭住址：&quot; &lt;&lt; endl;
		string address;
		cin &gt;&gt; address;
		abs-&gt;personArray[ret].m_Addr = address;

		cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;
	}
	else
	{
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	}

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

}
</code></pre>
<h3 id="92-测试修改联系人功能">9.2 测试修改联系人功能</h3>
<p>在switch case 语句中，case 5里添加：</p>
<pre><code class="language-C++">case 5:  //修改联系人
	modifyPerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图：</p>
<p>查不到指定联系人情况：</p>
<figure data-type="image" tabindex="22"><img src="https://Muanlei.GitHub.io/post-images/1610034407314.png" alt="" loading="lazy"></figure>
<p>查找到联系人，并修改成功：</p>
<figure data-type="image" tabindex="23"><img src="https://Muanlei.GitHub.io/post-images/1610034413204.png" alt="" loading="lazy"></figure>
<p>再次查看通讯录，确认修改完毕</p>
<figure data-type="image" tabindex="24"><img src="https://Muanlei.GitHub.io/post-images/1610034427512.png" alt="" loading="lazy"></figure>
<h2 id="10-清空联系人">10、清空联系人</h2>
<p>功能描述：清空通讯录中所有信息</p>
<p>清空联系人实现步骤</p>
<ul>
<li>封装清空联系人函数</li>
<li>测试清空联系人</li>
</ul>
<h3 id="101-封装清空联系人函数">10.1 封装清空联系人函数</h3>
<p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p>
<p>清空联系人代码：</p>
<pre><code class="language-C++">//6、清空所有联系人
void cleanPerson(Addressbooks * abs)
{
	abs-&gt;m_Size = 0;
	cout &lt;&lt; &quot;通讯录已清空&quot; &lt;&lt; endl;
	system(&quot;pause&quot;);
	system(&quot;cls&quot;);
}
</code></pre>
<h3 id="102-测试清空联系人">10.2  测试清空联系人</h3>
<p>在switch case 语句中，case 6 里添加：</p>
<pre><code class="language-C++">case 6:  //清空联系人
	cleanPerson(&amp;abs);
	break;
</code></pre>
<p>测试效果如图：</p>
<p>清空通讯录</p>
<figure data-type="image" tabindex="25"><img src="https://Muanlei.GitHub.io/post-images/1610034460172.png" alt="" loading="lazy"></figure>
<p>再次查看信息，显示记录为空</p>
<figure data-type="image" tabindex="26"><img src="https://Muanlei.GitHub.io/post-images/1610034487150.png" alt="" loading="lazy"></figure>
<p><strong>至此，通讯录管理系统完成！</strong></p>
<h1 id=""></h1>
]]></content>
    </entry>
</feed>